{"version":3,"sources":["serviceWorker.js","Components/Logo.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","App/App.js","index.js","img/New Horizons Logo.png"],"names":["Boolean","window","location","hostname","match","Logo","className","src","logo","alt","SearchBox","searchfield","searchChange","type","name","id","placeholder","onChange","Card","phrase","style","textTransform","CardList","villagers","map","villager","key","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","result","Object","entries","catch","error","console","log","message","this","filteredVillagers","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"yPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDCLSC,EAVF,WACX,OACE,yBAAKC,UAAU,YACb,gCACE,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,YCU9BC,EAfG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKN,UAAU,kBACb,2BACEA,UAAU,qDACVO,KAAK,SACLC,KAAK,GACLC,GAAG,GACHC,YAAY,mBACZC,SAAUL,MCYHM,EArBF,SAAC,GAA0B,IAAxBH,EAAuB,EAAvBA,GAAID,EAAmB,EAAnBA,KAAMK,EAAa,EAAbA,OACxB,OACE,yBAAKb,UAAU,+DACb,yBACEA,UAAU,UACVC,IAAG,8CAAyCQ,GAC5CN,IAAG,mBAAcK,KAEnB,6BACE,wBAAIR,UAAU,UAAUQ,GACxB,uBACER,UAAU,qBACVc,MAAO,CAAEC,cAAe,eAF1B,IAIIF,EAJJ,QCQOG,EAjBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClB,OACE,6BACGA,EAAUC,KAAI,SAACC,GACd,OACE,kBAAC,EAAD,CACEC,IAAKD,EAASV,GACdA,GAAIU,EAASV,GACbD,KAAMW,EAASX,KAAK,WACpBK,OAAQM,EAAS,uBC0CdE,E,kDA9Cb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEnB,YAAakB,EAAME,OAAOC,SAjB1C,EAAKC,MAAQ,CACXV,UAAW,GACXZ,YAAa,IAJH,E,gEAQO,IAAD,OAClBuB,MAAM,iCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMf,EAAYgB,OAAOC,QAAQF,GAAQd,KAAI,SAACC,GAAD,OAAcA,EAAS,MACpE,EAAKK,SAAS,CAAEP,UAAWA,OAE5BkB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,EAAMG,c,+BAO9B,IAAD,EAC4BC,KAAKb,MAAhCV,EADD,EACCA,UAAWZ,EADZ,EACYA,YACboC,EAAoBxB,EAAUyB,QAAO,SAACvB,GAE1C,OADmBA,EAASX,KAAK,WACfmC,cAAcC,SAASvC,EAAYsC,kBAEvD,OAAK1B,EAAU4B,OAMX,yBAAK7C,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWM,aAAckC,KAAKlB,iBAC5B,kBAAC,EAAD,CAAUL,UAAWwB,KAPzB,wBAAIzC,UAAU,mCAAd,wB,GA/BU8C,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMG,a,kBOzI5BiB,EAAOC,QAAU,IAA0B,+C","file":"static/js/main.7c77489a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport logo from \"../img/New Horizons Logo.png\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"logo-div\">\r\n      <header>\r\n        <img src={logo} className=\"logo\" alt=\"logo\" />\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"search-div pa2\">\r\n      <input\r\n        className=\"pa2 ba bw3 br3 b--light-yellow bg-washed-yellow w5\"\r\n        type=\"search\"\r\n        name=\"\"\r\n        id=\"\"\r\n        placeholder=\"search villagers\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, phrase }) => {\r\n  return (\r\n    <div className=\"dark-gray bg-light-yellow dib br2 pa3 ma2 shadow-5 w50 grow\">\r\n      <img\r\n        className=\"br2 mw5\"\r\n        src={`http://acnhapi.com/images/villagers/${id}`}\r\n        alt={`image_of_${name}`}\r\n      />\r\n      <div>\r\n        <h2 className=\"f3 ma2\">{name}</h2>\r\n        <p\r\n          className=\"phrase f5 ma1 gray\"\r\n          style={{ textTransform: \"capitalize\" }}\r\n        >\r\n          \"{phrase}\"\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ villagers }) => {\r\n  return (\r\n    <div>\r\n      {villagers.map((villager) => {\r\n        return (\r\n          <Card\r\n            key={villager.id}\r\n            id={villager.id}\r\n            name={villager.name[\"name-en\"]}\r\n            phrase={villager[\"catch-phrase\"]}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Logo from \"../Components/Logo\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\n// import Scroll from \"../Components/Scroll\";\r\nimport CardList from \"../Components/CardList\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      villagers: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://acnhapi.com/villagers\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        const villagers = Object.entries(result).map((villager) => villager[1]);\r\n        this.setState({ villagers: villagers });\r\n      })\r\n      .catch((error) => console.log(error.message));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { villagers, searchfield } = this.state;\r\n    const filteredVillagers = villagers.filter((villager) => {\r\n      const animalName = villager.name[\"name-en\"];\r\n      return animalName.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n    if (!villagers.length) {\r\n      return (\r\n        <h1 className=\"tc pa3 bg-light-yellow mid-gray\">Hold on a sec...</h1>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <Logo />\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n            <CardList villagers={filteredVillagers} />\r\n          {/* <Scroll>\r\n          </Scroll> */}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App/App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/New Horizons Logo.ee6b4980.png\";"],"sourceRoot":""}