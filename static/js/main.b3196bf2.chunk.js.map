{"version":3,"sources":["img/new-horizons-logo.png","serviceWorker.js","Components/Logo.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","Containers/App.js","Redux/actions.js","constants.js","Redux/reducers.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Logo","hasLogo","nextProps","nextState","this","className","src","logo","alt","Component","SearchBox","searchChange","htmlFor","type","name","id","placeholder","onChange","Card","phrase","style","textTransform","CardList","villagers","map","villager","key","App","props","onRequestVillagers","searchField","onSearchChange","apiData","isPending","filteredVillagers","Object","entries","filter","toLowerCase","includes","connect","searchFieldReducer","requestApiReducer","dispatch","event","payload","target","value","fetch","response","json","result","initialStateSearch","initialStateApi","allReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,+C,0JCYrCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,iDCnElDC,E,kDAzBb,aAAe,IAAD,8BACZ,gBACKR,MAAQ,CACXS,SAAS,GAHC,E,kEAMQC,EAAWC,GAC/B,OAAIC,KAAKZ,MAAMS,UAAYE,EAAUF,U,+BAQrC,OADAP,QAAQC,IAAI,QAEV,yBAAKU,UAAU,YACb,gCACE,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,e,GAnB5BC,aCiBJC,EAlBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAEnB,OADAjB,QAAQC,IAAI,aAEV,yBAAKU,UAAU,kBACb,2BAAOO,QAAQ,eACb,2BACEP,UAAU,qDACVQ,KAAK,SACLC,KAAK,GACLC,GAAG,cACHC,YAAY,mBACZC,SAAUN,OCULO,EArBF,SAAC,GAA0B,IAAxBH,EAAuB,EAAvBA,GAAID,EAAmB,EAAnBA,KAAMK,EAAa,EAAbA,OACxB,OACE,yBAAKd,UAAU,0DACb,yBACEA,UAAU,UACVC,IAAG,+CAA0CS,EAA1C,yBACHP,IAAG,mBAAcM,KAEnB,6BACE,wBAAIT,UAAU,UAAUS,GACxB,uBACET,UAAU,qBACVe,MAAO,CAAEC,cAAe,eAF1B,IAIIF,EAJJ,QCSOG,EAlBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAElB,OADA7B,QAAQC,IAAI,YAEV,6BACG4B,EAAUC,KAAI,SAACC,GACd,OACE,kBAAC,EAAD,CACEC,IAAKD,EAASV,GACdA,GAAIU,EAASV,GACbD,KAAMW,EAASX,KAAK,WACpBK,OAAQM,EAAS,uBCevBE,E,kLAEFvB,KAAKwB,MAAMC,uB,+BAGJ,MAEqDzB,KAAKwB,MAAzDE,EAFD,EAECA,YAAaC,EAFd,EAEcA,eAAgBC,EAF9B,EAE8BA,QAASC,EAFvC,EAEuCA,UAIxCC,EADYC,OAAOC,QAAQJ,GAASR,KAAI,SAACC,GAAD,OAAcA,EAAS,MACjCY,QAAO,SAACZ,GAE1C,OADmBA,EAASX,KAAK,WACfwB,cAAcC,SAAST,EAAYQ,kBAEvD,OAAIL,EAEA,wBAAI5B,UAAU,mCAAd,2BAMA,yBAAKA,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWM,aAAcoB,IACzB,kBAAC,EAAD,CAAUR,UAAWW,S,GA1BbzB,aAiCH+B,eApDS,SAAChD,GAEvB,MAAO,CACLsC,YAAatC,EAAMiD,mBAAmBX,YACtCG,UAAWzC,EAAMkD,kBAAkBT,UACnCD,QAASxC,EAAMkD,kBAAkBV,QACjCjC,MAAOP,EAAMkD,kBAAkB3C,UAIR,SAAC4C,GAC1B,MAAO,CACLZ,eAAgB,SAACa,GACfD,ECfoC,CACxC9B,KCRwB,aDSxBgC,QDa6BD,EAAME,OAAOC,SAExClB,mBAAoB,kBAAMc,GCZQ,SAACA,GACrCA,EAAS,CAAE9B,KCZsB,wBDajCmC,MAAM,iCACH9D,MAAK,SAAC+D,GAAD,OAAcA,EAASC,UAC5BhE,MAAK,SAACiE,GAAD,OAAYR,EAAS,CAAE9B,KCdE,sBDcyBgC,QAASM,OAChErD,OAAM,SAACC,GAAD,OAAW4C,EAAS,CAAE9B,KCdC,qBDcyBgC,QAAS9C,cD4CrDyC,CAA6Cb,G,OGrDtDyB,EAAqB,CACzBtB,YAAa,IAYTuB,EAAkB,CACtBpB,WAAW,EACXD,QAAS,GACTjC,MAAO,IAmBIuD,EAAcC,YAAgB,CACzCd,mBAhCyB,WAA8C,IAA7CjD,EAA4C,uDAApC4D,EAAoBI,EAAgB,uDAAP,GAC/D,OAAQA,EAAO3C,MACb,IDdsB,aCepB,OAAO,2BAAKrB,GAAZ,IAAmBsC,YAAa0B,EAAOX,UACzC,QACE,OAAOrD,IA4BXkD,kBAlBwB,WAGpB,IAFJlD,EAEG,uDAFK6D,EACRG,EACG,uDADM,GAET,OAAQA,EAAO3C,MACb,ID/B+B,sBCgC7B,OAAO,2BAAKrB,GAAZ,IAAmByC,WAAW,IAChC,IDhC+B,sBCiC7B,OAAO,2BAAKzC,GAAZ,IAAmBwC,QAASwB,EAAOX,QAASZ,WAAW,IACzD,IDjC8B,qBCkC5B,OAAO,2BAAKzC,GAAZ,IAAmBO,MAAOyD,EAAOX,QAASZ,WAAW,IACvD,QACE,OAAOzC,MCvBPiE,G,YAAQC,YAAYJ,EAAaK,YAAgBC,OAEvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,STAnB,SAAkBlF,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkF,IAAIC,gCAAwB1F,OAAOC,SAAS0F,MACpDC,SAAW5F,OAAOC,SAAS2F,OAIvC,OAGF5F,OAAO6F,iBAAiB,QAAQ,WAC9B,IAAMxF,EAAK,UAAMqF,gCAAN,sBAEP5F,IAgEV,SAAiCO,EAAOC,GAEtCkE,MAAMnE,EAAO,CACXyF,QAAS,CAAE,iBAAkB,YAE5BpF,MAAK,SAAA+D,GAEJ,IAAMsB,EAActB,EAASqB,QAAQE,IAAI,gBAEnB,MAApBvB,EAASwB,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3F,UAAUC,cAAc2F,MAAMzF,MAAK,SAAAC,GACjCA,EAAayF,aAAa1F,MAAK,WAC7BV,OAAOC,SAASoG,eAKpBjG,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAmF,CAAwBjG,EAAOC,GAI/BC,UAAUC,cAAc2F,MAAMzF,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OStB/BE,K","file":"static/js/main.b3196bf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/new-horizons-logo.ee6b4980.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport logo from \"../img/new-horizons-logo.png\";\r\n\r\nclass Logo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasLogo: true,\r\n    };\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.hasLogo !== nextState.hasLogo) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Logo\");\r\n    return (\r\n      <div className=\"logo-div\">\r\n        <header>\r\n          <img src={logo} className=\"logo\" alt=\"logo\" />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  console.log(\"SearchBox\");\r\n  return (\r\n    <div className=\"search-div pa2\">\r\n      <label htmlFor=\"searchInput\">\r\n        <input\r\n          className=\"pa2 ba bw3 br3 b--light-yellow bg-washed-yellow w5\"\r\n          type=\"search\"\r\n          name=\"\"\r\n          id=\"searchInput\"\r\n          placeholder=\"search villagers\"\r\n          onChange={searchChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, phrase }) => {\r\n  return (\r\n    <div className=\"navy bg-light-yellow dib br2 pa3 ma2 shadow-5 w50 grow\">\r\n      <img\r\n        className=\"br2 mw5\"\r\n        src={`https://acnhapi.com/images/villagers/${id}?width=256&height=256`}\r\n        alt={`image_of_${name}`}\r\n      />\r\n      <div>\r\n        <h2 className=\"f3 ma2\">{name}</h2>\r\n        <p\r\n          className=\"phrase f5 ma1 navy\"\r\n          style={{ textTransform: \"capitalize\" }}\r\n        >\r\n          \"{phrase}\"\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ villagers }) => {\r\n  console.log(\"CardList\");\r\n  return (\r\n    <div>\r\n      {villagers.map((villager) => {\r\n        return (\r\n          <Card\r\n            key={villager.id}\r\n            id={villager.id}\r\n            name={villager.name[\"name-en\"]}\r\n            phrase={villager[\"catch-phrase\"]}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","// BUILT-IN IMPORTS\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// CUSTOM IMPORTS\r\nimport Logo from \"../Components/Logo\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport CardList from \"../Components/CardList\";\r\nimport { inputTextAction, requestApiAction } from \"../Redux/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  // return all state from reducers\r\n  return {\r\n    searchField: state.searchFieldReducer.searchField,\r\n    isPending: state.requestApiReducer.isPending,\r\n    apiData: state.requestApiReducer.apiData,\r\n    error: state.requestApiReducer.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => {\r\n      dispatch(inputTextAction(event.target.value));\r\n    },\r\n    onRequestVillagers: () => dispatch(requestApiAction()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestVillagers();\r\n  }\r\n\r\n  render() {\r\n    // PROPS\r\n    const { searchField, onSearchChange, apiData, isPending } = this.props;\r\n\r\n    // FILTER VILLAGERS\r\n    const villagers = Object.entries(apiData).map((villager) => villager[1]);\r\n    const filteredVillagers = villagers.filter((villager) => {\r\n      const animalName = villager.name[\"name-en\"];\r\n      return animalName.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    if (isPending) {\r\n      return (\r\n        <h1 className=\"tc pa3 bg-light-yellow mid-gray\">\r\n          Hold on just a sec, OK?\r\n        </h1>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <Logo />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <CardList villagers={filteredVillagers} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  INPUT_TEXT,\r\n  REQUEST_API_PENDING,\r\n  REQUEST_API_SUCCESS,\r\n  REQUEST_API_FAILED,\r\n} from \"../constants\";\r\n\r\nexport const inputTextAction = (text) => ({\r\n  type: INPUT_TEXT,\r\n  payload: text,\r\n});\r\n\r\nexport const requestApiAction = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_API_PENDING });\r\n  fetch(\"https://acnhapi.com/villagers\")\r\n    .then((response) => response.json())\r\n    .then((result) => dispatch({ type: REQUEST_API_SUCCESS, payload: result }))\r\n    .catch((error) => dispatch({ type: REQUEST_API_FAILED, payload: error }));\r\n};\r\n","export const INPUT_TEXT = \"INPUT_TEXT\";\r\nexport const REQUEST_API_PENDING = \"REQUEST_API_PENDING\";\r\nexport const REQUEST_API_SUCCESS = \"REQUEST_API_SUCCESS\";\r\nexport const REQUEST_API_FAILED = \"REQUEST_API_FAILED\";\r\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  INPUT_TEXT,\r\n  REQUEST_API_PENDING,\r\n  REQUEST_API_SUCCESS,\r\n  REQUEST_API_FAILED,\r\n} from \"../constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nconst searchFieldReducer = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case INPUT_TEXT:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateApi = {\r\n  isPending: false,\r\n  apiData: [],\r\n  error: \"\",\r\n};\r\n\r\nconst requestApiReducer = (\r\n  state = initialStateApi,\r\n  action = {}\r\n) => {\r\n  switch (action.type) {\r\n    case REQUEST_API_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_API_SUCCESS:\r\n      return { ...state, apiData: action.payload, isPending: false };\r\n    case REQUEST_API_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const allReducers = combineReducers({\r\n  searchFieldReducer,\r\n  requestApiReducer,\r\n});\r\n\r\nexport default allReducers;\r\n","//BUILT-IN IMPORTS\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n// import { createLogger } from \"redux-logger\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n//CUSTOM IMPORTS\r\nimport App from \"./Containers/App\";\r\nimport { allReducers } from \"./Redux/reducers\";\r\n//STYLING IMPORTS\r\nimport \"tachyons\";\r\nimport \"./index.css\";\r\n\r\n// const logger = createLogger();\r\nconst store = createStore(allReducers, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}